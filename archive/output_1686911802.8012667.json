{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 3}, "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'init_driver' for <Function test_validate_to_upload_file[chrome]>>\n\n    @pytest.fixture(params=[\"chrome\"],scope=\"session\", autouse= True)\n    def init_driver(request):\n        global web_driver\n        if request.param==\"chrome\":\n            web_driver = webdriver.Chrome(ChromeDriverManager().install())\n            web_driver.maximize_window()\n            web_driver.implicitly_wait(5)\n            web_driver.get(TestData.Base_Url)\n            login = LoginPage(web_driver)\n>           login.do_login(TestData.Username, TestData.Password)\n\nTests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\LoginPage.py:24: in do_login\n    self.do_send_keys(LoginLocators.Email, username)\nPages\\BasePage.py:18: in do_send_keys\n    WebDriverWait(self.driver, 10).until(ec.visibility_of_element_located(by_locator)).send_keys(text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5fda8219f3edd837acf67572926db950\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000251388D5A20>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0046A813+48355]\nE       \t(No symbol) [0x003FC4B1]\nE       \t(No symbol) [0x00305358]\nE       \t(No symbol) [0x003309A5]\nE       \t(No symbol) [0x00330B3B]\nE       \t(No symbol) [0x0035E232]\nE       \t(No symbol) [0x0034A784]\nE       \t(No symbol) [0x0035C922]\nE       \t(No symbol) [0x0034A536]\nE       \t(No symbol) [0x003282DC]\nE       \t(No symbol) [0x003293DD]\nE       \tGetHandleVerifier [0x006CAABD+2539405]\nE       \tGetHandleVerifier [0x0070A78F+2800735]\nE       \tGetHandleVerifier [0x0070456C+2775612]\nE       \tGetHandleVerifier [0x004F51E0+616112]\nE       \t(No symbol) [0x00405F8C]\nE       \t(No symbol) [0x00402328]\nE       \t(No symbol) [0x0040240B]\nE       \t(No symbol) [0x003F4FF7]\nE       \tBaseThreadInitThunk [0x76CA00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B4E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B1E+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException\n", "test_name": "test_validate_to_upload_file[chrome]", "rerun": "0"}, "1": {"status": "ERROR", "message": "request = <SubRequest 'init_driver' for <Function test_validate_to_upload_file[chrome]>>\n\n    @pytest.fixture(params=[\"chrome\"],scope=\"session\", autouse= True)\n    def init_driver(request):\n        global web_driver\n        if request.param==\"chrome\":\n            web_driver = webdriver.Chrome(ChromeDriverManager().install())\n            web_driver.maximize_window()\n            web_driver.implicitly_wait(5)\n            web_driver.get(TestData.Base_Url)\n            login = LoginPage(web_driver)\n>           login.do_login(TestData.Username, TestData.Password)\n\nTests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\LoginPage.py:24: in do_login\n    self.do_send_keys(LoginLocators.Email, username)\nPages\\BasePage.py:18: in do_send_keys\n    WebDriverWait(self.driver, 10).until(ec.visibility_of_element_located(by_locator)).send_keys(text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5fda8219f3edd837acf67572926db950\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000251388D5A20>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0046A813+48355]\nE       \t(No symbol) [0x003FC4B1]\nE       \t(No symbol) [0x00305358]\nE       \t(No symbol) [0x003309A5]\nE       \t(No symbol) [0x00330B3B]\nE       \t(No symbol) [0x0035E232]\nE       \t(No symbol) [0x0034A784]\nE       \t(No symbol) [0x0035C922]\nE       \t(No symbol) [0x0034A536]\nE       \t(No symbol) [0x003282DC]\nE       \t(No symbol) [0x003293DD]\nE       \tGetHandleVerifier [0x006CAABD+2539405]\nE       \tGetHandleVerifier [0x0070A78F+2800735]\nE       \tGetHandleVerifier [0x0070456C+2775612]\nE       \tGetHandleVerifier [0x004F51E0+616112]\nE       \t(No symbol) [0x00405F8C]\nE       \t(No symbol) [0x00402328]\nE       \t(No symbol) [0x0040240B]\nE       \t(No symbol) [0x003F4FF7]\nE       \tBaseThreadInitThunk [0x76CA00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B4E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B1E+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException\n", "test_name": "test_Tax_Exemptions[chrome]", "rerun": "0"}, "2": {"status": "ERROR", "message": "request = <SubRequest 'init_driver' for <Function test_validate_to_upload_file[chrome]>>\n\n    @pytest.fixture(params=[\"chrome\"],scope=\"session\", autouse= True)\n    def init_driver(request):\n        global web_driver\n        if request.param==\"chrome\":\n            web_driver = webdriver.Chrome(ChromeDriverManager().install())\n            web_driver.maximize_window()\n            web_driver.implicitly_wait(5)\n            web_driver.get(TestData.Base_Url)\n            login = LoginPage(web_driver)\n>           login.do_login(TestData.Username, TestData.Password)\n\nTests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\LoginPage.py:24: in do_login\n    self.do_send_keys(LoginLocators.Email, username)\nPages\\BasePage.py:18: in do_send_keys\n    WebDriverWait(self.driver, 10).until(ec.visibility_of_element_located(by_locator)).send_keys(text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5fda8219f3edd837acf67572926db950\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000251388D5A20>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0046A813+48355]\nE       \t(No symbol) [0x003FC4B1]\nE       \t(No symbol) [0x00305358]\nE       \t(No symbol) [0x003309A5]\nE       \t(No symbol) [0x00330B3B]\nE       \t(No symbol) [0x0035E232]\nE       \t(No symbol) [0x0034A784]\nE       \t(No symbol) [0x0035C922]\nE       \t(No symbol) [0x0034A536]\nE       \t(No symbol) [0x003282DC]\nE       \t(No symbol) [0x003293DD]\nE       \tGetHandleVerifier [0x006CAABD+2539405]\nE       \tGetHandleVerifier [0x0070A78F+2800735]\nE       \tGetHandleVerifier [0x0070456C+2775612]\nE       \tGetHandleVerifier [0x004F51E0+616112]\nE       \t(No symbol) [0x00405F8C]\nE       \t(No symbol) [0x00402328]\nE       \t(No symbol) [0x0040240B]\nE       \t(No symbol) [0x003F4FF7]\nE       \tBaseThreadInitThunk [0x76CA00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B4E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B1E+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException\n", "test_name": "test_validate_profile_icon[chrome]", "rerun": "0"}}, "suite_name": "Tests/test_MyInfoPage.py"}, "1": {"suite_name": "Tests/test_HomePage.py", "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'init_driver' for <Function test_validate_to_upload_file[chrome]>>\n\n    @pytest.fixture(params=[\"chrome\"],scope=\"session\", autouse= True)\n    def init_driver(request):\n        global web_driver\n        if request.param==\"chrome\":\n            web_driver = webdriver.Chrome(ChromeDriverManager().install())\n            web_driver.maximize_window()\n            web_driver.implicitly_wait(5)\n            web_driver.get(TestData.Base_Url)\n            login = LoginPage(web_driver)\n>           login.do_login(TestData.Username, TestData.Password)\n\nTests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\LoginPage.py:24: in do_login\n    self.do_send_keys(LoginLocators.Email, username)\nPages\\BasePage.py:18: in do_send_keys\n    WebDriverWait(self.driver, 10).until(ec.visibility_of_element_located(by_locator)).send_keys(text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5fda8219f3edd837acf67572926db950\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000251388D5A20>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0046A813+48355]\nE       \t(No symbol) [0x003FC4B1]\nE       \t(No symbol) [0x00305358]\nE       \t(No symbol) [0x003309A5]\nE       \t(No symbol) [0x00330B3B]\nE       \t(No symbol) [0x0035E232]\nE       \t(No symbol) [0x0034A784]\nE       \t(No symbol) [0x0035C922]\nE       \t(No symbol) [0x0034A536]\nE       \t(No symbol) [0x003282DC]\nE       \t(No symbol) [0x003293DD]\nE       \tGetHandleVerifier [0x006CAABD+2539405]\nE       \tGetHandleVerifier [0x0070A78F+2800735]\nE       \tGetHandleVerifier [0x0070456C+2775612]\nE       \tGetHandleVerifier [0x004F51E0+616112]\nE       \t(No symbol) [0x00405F8C]\nE       \t(No symbol) [0x00402328]\nE       \t(No symbol) [0x0040240B]\nE       \t(No symbol) [0x003F4FF7]\nE       \tBaseThreadInitThunk [0x76CA00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B4E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B1E+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException\n", "test_name": "test_home_Page_title[chrome]", "rerun": "0"}, "1": {"status": "ERROR", "message": "request = <SubRequest 'init_driver' for <Function test_validate_to_upload_file[chrome]>>\n\n    @pytest.fixture(params=[\"chrome\"],scope=\"session\", autouse= True)\n    def init_driver(request):\n        global web_driver\n        if request.param==\"chrome\":\n            web_driver = webdriver.Chrome(ChromeDriverManager().install())\n            web_driver.maximize_window()\n            web_driver.implicitly_wait(5)\n            web_driver.get(TestData.Base_Url)\n            login = LoginPage(web_driver)\n>           login.do_login(TestData.Username, TestData.Password)\n\nTests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\LoginPage.py:24: in do_login\n    self.do_send_keys(LoginLocators.Email, username)\nPages\\BasePage.py:18: in do_send_keys\n    WebDriverWait(self.driver, 10).until(ec.visibility_of_element_located(by_locator)).send_keys(text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5fda8219f3edd837acf67572926db950\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000251388D5A20>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0046A813+48355]\nE       \t(No symbol) [0x003FC4B1]\nE       \t(No symbol) [0x00305358]\nE       \t(No symbol) [0x003309A5]\nE       \t(No symbol) [0x00330B3B]\nE       \t(No symbol) [0x0035E232]\nE       \t(No symbol) [0x0034A784]\nE       \t(No symbol) [0x0035C922]\nE       \t(No symbol) [0x0034A536]\nE       \t(No symbol) [0x003282DC]\nE       \t(No symbol) [0x003293DD]\nE       \tGetHandleVerifier [0x006CAABD+2539405]\nE       \tGetHandleVerifier [0x0070A78F+2800735]\nE       \tGetHandleVerifier [0x0070456C+2775612]\nE       \tGetHandleVerifier [0x004F51E0+616112]\nE       \t(No symbol) [0x00405F8C]\nE       \t(No symbol) [0x00402328]\nE       \t(No symbol) [0x0040240B]\nE       \t(No symbol) [0x003F4FF7]\nE       \tBaseThreadInitThunk [0x76CA00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B4E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B1E+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException\n", "test_name": "test_home_Page_Header[chrome]", "rerun": "0"}, "2": {"status": "ERROR", "message": "request = <SubRequest 'init_driver' for <Function test_validate_to_upload_file[chrome]>>\n\n    @pytest.fixture(params=[\"chrome\"],scope=\"session\", autouse= True)\n    def init_driver(request):\n        global web_driver\n        if request.param==\"chrome\":\n            web_driver = webdriver.Chrome(ChromeDriverManager().install())\n            web_driver.maximize_window()\n            web_driver.implicitly_wait(5)\n            web_driver.get(TestData.Base_Url)\n            login = LoginPage(web_driver)\n>           login.do_login(TestData.Username, TestData.Password)\n\nTests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\LoginPage.py:24: in do_login\n    self.do_send_keys(LoginLocators.Email, username)\nPages\\BasePage.py:18: in do_send_keys\n    WebDriverWait(self.driver, 10).until(ec.visibility_of_element_located(by_locator)).send_keys(text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5fda8219f3edd837acf67572926db950\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000251388D5A20>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0046A813+48355]\nE       \t(No symbol) [0x003FC4B1]\nE       \t(No symbol) [0x00305358]\nE       \t(No symbol) [0x003309A5]\nE       \t(No symbol) [0x00330B3B]\nE       \t(No symbol) [0x0035E232]\nE       \t(No symbol) [0x0034A784]\nE       \t(No symbol) [0x0035C922]\nE       \t(No symbol) [0x0034A536]\nE       \t(No symbol) [0x003282DC]\nE       \t(No symbol) [0x003293DD]\nE       \tGetHandleVerifier [0x006CAABD+2539405]\nE       \tGetHandleVerifier [0x0070A78F+2800735]\nE       \tGetHandleVerifier [0x0070456C+2775612]\nE       \tGetHandleVerifier [0x004F51E0+616112]\nE       \t(No symbol) [0x00405F8C]\nE       \t(No symbol) [0x00402328]\nE       \t(No symbol) [0x0040240B]\nE       \t(No symbol) [0x003F4FF7]\nE       \tBaseThreadInitThunk [0x76CA00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B4E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B1E+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException\n", "test_name": "test_help_icon_exist[chrome]", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 3}}, "2": {"suite_name": "Tests/test_LoginPage.py", "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'init_driver' for <Function test_validate_to_upload_file[chrome]>>\n\n    @pytest.fixture(params=[\"chrome\"],scope=\"session\", autouse= True)\n    def init_driver(request):\n        global web_driver\n        if request.param==\"chrome\":\n            web_driver = webdriver.Chrome(ChromeDriverManager().install())\n            web_driver.maximize_window()\n            web_driver.implicitly_wait(5)\n            web_driver.get(TestData.Base_Url)\n            login = LoginPage(web_driver)\n>           login.do_login(TestData.Username, TestData.Password)\n\nTests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\LoginPage.py:24: in do_login\n    self.do_send_keys(LoginLocators.Email, username)\nPages\\BasePage.py:18: in do_send_keys\n    WebDriverWait(self.driver, 10).until(ec.visibility_of_element_located(by_locator)).send_keys(text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5fda8219f3edd837acf67572926db950\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000251388D5A20>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0046A813+48355]\nE       \t(No symbol) [0x003FC4B1]\nE       \t(No symbol) [0x00305358]\nE       \t(No symbol) [0x003309A5]\nE       \t(No symbol) [0x00330B3B]\nE       \t(No symbol) [0x0035E232]\nE       \t(No symbol) [0x0034A784]\nE       \t(No symbol) [0x0035C922]\nE       \t(No symbol) [0x0034A536]\nE       \t(No symbol) [0x003282DC]\nE       \t(No symbol) [0x003293DD]\nE       \tGetHandleVerifier [0x006CAABD+2539405]\nE       \tGetHandleVerifier [0x0070A78F+2800735]\nE       \tGetHandleVerifier [0x0070456C+2775612]\nE       \tGetHandleVerifier [0x004F51E0+616112]\nE       \t(No symbol) [0x00405F8C]\nE       \t(No symbol) [0x00402328]\nE       \t(No symbol) [0x0040240B]\nE       \t(No symbol) [0x003F4FF7]\nE       \tBaseThreadInitThunk [0x76CA00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B4E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B1E+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException\n", "test_name": "test_signup_link_visible[chrome]", "rerun": "0"}, "1": {"status": "ERROR", "message": "request = <SubRequest 'init_driver' for <Function test_validate_to_upload_file[chrome]>>\n\n    @pytest.fixture(params=[\"chrome\"],scope=\"session\", autouse= True)\n    def init_driver(request):\n        global web_driver\n        if request.param==\"chrome\":\n            web_driver = webdriver.Chrome(ChromeDriverManager().install())\n            web_driver.maximize_window()\n            web_driver.implicitly_wait(5)\n            web_driver.get(TestData.Base_Url)\n            login = LoginPage(web_driver)\n>           login.do_login(TestData.Username, TestData.Password)\n\nTests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\LoginPage.py:24: in do_login\n    self.do_send_keys(LoginLocators.Email, username)\nPages\\BasePage.py:18: in do_send_keys\n    WebDriverWait(self.driver, 10).until(ec.visibility_of_element_located(by_locator)).send_keys(text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5fda8219f3edd837acf67572926db950\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000251388D5A20>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0046A813+48355]\nE       \t(No symbol) [0x003FC4B1]\nE       \t(No symbol) [0x00305358]\nE       \t(No symbol) [0x003309A5]\nE       \t(No symbol) [0x00330B3B]\nE       \t(No symbol) [0x0035E232]\nE       \t(No symbol) [0x0034A784]\nE       \t(No symbol) [0x0035C922]\nE       \t(No symbol) [0x0034A536]\nE       \t(No symbol) [0x003282DC]\nE       \t(No symbol) [0x003293DD]\nE       \tGetHandleVerifier [0x006CAABD+2539405]\nE       \tGetHandleVerifier [0x0070A78F+2800735]\nE       \tGetHandleVerifier [0x0070456C+2775612]\nE       \tGetHandleVerifier [0x004F51E0+616112]\nE       \t(No symbol) [0x00405F8C]\nE       \t(No symbol) [0x00402328]\nE       \t(No symbol) [0x0040240B]\nE       \t(No symbol) [0x003F4FF7]\nE       \tBaseThreadInitThunk [0x76CA00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B4E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B1E+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException\n", "test_name": "test_login_Page_Title[chrome]", "rerun": "0"}, "2": {"status": "ERROR", "message": "request = <SubRequest 'init_driver' for <Function test_validate_to_upload_file[chrome]>>\n\n    @pytest.fixture(params=[\"chrome\"],scope=\"session\", autouse= True)\n    def init_driver(request):\n        global web_driver\n        if request.param==\"chrome\":\n            web_driver = webdriver.Chrome(ChromeDriverManager().install())\n            web_driver.maximize_window()\n            web_driver.implicitly_wait(5)\n            web_driver.get(TestData.Base_Url)\n            login = LoginPage(web_driver)\n>           login.do_login(TestData.Username, TestData.Password)\n\nTests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\LoginPage.py:24: in do_login\n    self.do_send_keys(LoginLocators.Email, username)\nPages\\BasePage.py:18: in do_send_keys\n    WebDriverWait(self.driver, 10).until(ec.visibility_of_element_located(by_locator)).send_keys(text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5fda8219f3edd837acf67572926db950\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000251388D5A20>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0046A813+48355]\nE       \t(No symbol) [0x003FC4B1]\nE       \t(No symbol) [0x00305358]\nE       \t(No symbol) [0x003309A5]\nE       \t(No symbol) [0x00330B3B]\nE       \t(No symbol) [0x0035E232]\nE       \t(No symbol) [0x0034A784]\nE       \t(No symbol) [0x0035C922]\nE       \t(No symbol) [0x0034A536]\nE       \t(No symbol) [0x003282DC]\nE       \t(No symbol) [0x003293DD]\nE       \tGetHandleVerifier [0x006CAABD+2539405]\nE       \tGetHandleVerifier [0x0070A78F+2800735]\nE       \tGetHandleVerifier [0x0070456C+2775612]\nE       \tGetHandleVerifier [0x004F51E0+616112]\nE       \t(No symbol) [0x00405F8C]\nE       \t(No symbol) [0x00402328]\nE       \t(No symbol) [0x0040240B]\nE       \t(No symbol) [0x003F4FF7]\nE       \tBaseThreadInitThunk [0x76CA00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B4E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B1E+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException\n", "test_name": "test_login_for_Invalid_Credential[chrome]", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 3}}, "3": {"suite_name": "Tests/test_PerformancePage.py", "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'init_driver' for <Function test_validate_to_upload_file[chrome]>>\n\n    @pytest.fixture(params=[\"chrome\"],scope=\"session\", autouse= True)\n    def init_driver(request):\n        global web_driver\n        if request.param==\"chrome\":\n            web_driver = webdriver.Chrome(ChromeDriverManager().install())\n            web_driver.maximize_window()\n            web_driver.implicitly_wait(5)\n            web_driver.get(TestData.Base_Url)\n            login = LoginPage(web_driver)\n>           login.do_login(TestData.Username, TestData.Password)\n\nTests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\LoginPage.py:24: in do_login\n    self.do_send_keys(LoginLocators.Email, username)\nPages\\BasePage.py:18: in do_send_keys\n    WebDriverWait(self.driver, 10).until(ec.visibility_of_element_located(by_locator)).send_keys(text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5fda8219f3edd837acf67572926db950\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000251388D5A20>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0046A813+48355]\nE       \t(No symbol) [0x003FC4B1]\nE       \t(No symbol) [0x00305358]\nE       \t(No symbol) [0x003309A5]\nE       \t(No symbol) [0x00330B3B]\nE       \t(No symbol) [0x0035E232]\nE       \t(No symbol) [0x0034A784]\nE       \t(No symbol) [0x0035C922]\nE       \t(No symbol) [0x0034A536]\nE       \t(No symbol) [0x003282DC]\nE       \t(No symbol) [0x003293DD]\nE       \tGetHandleVerifier [0x006CAABD+2539405]\nE       \tGetHandleVerifier [0x0070A78F+2800735]\nE       \tGetHandleVerifier [0x0070456C+2775612]\nE       \tGetHandleVerifier [0x004F51E0+616112]\nE       \t(No symbol) [0x00405F8C]\nE       \t(No symbol) [0x00402328]\nE       \t(No symbol) [0x0040240B]\nE       \t(No symbol) [0x003F4FF7]\nE       \tBaseThreadInitThunk [0x76CA00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B4E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B1E+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException\n", "test_name": "test_Navigate_to_Performance_NavBar[chrome]", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}}}}, "date": "June 16, 2023", "start_time": 1686909162.763093, "total_suite": 4, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "10", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "10"}