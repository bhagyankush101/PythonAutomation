{"name": "test_signup_link_visible[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=114.0.5735.110)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0046A813+48355]\n\t(No symbol) [0x003FC4B1]\n\t(No symbol) [0x00305358]\n\t(No symbol) [0x00301B33]\n\t(No symbol) [0x002F8CA5]\n\t(No symbol) [0x002F9D0A]\n\t(No symbol) [0x002F9003]\n\t(No symbol) [0x002F8355]\n\t(No symbol) [0x002F82EC]\n\t(No symbol) [0x002F6F26]\n\t(No symbol) [0x002F7688]\n\t(No symbol) [0x00306B52]\n\t(No symbol) [0x0035CF01]\n\t(No symbol) [0x0034A73C]\n\t(No symbol) [0x0035C922]\n\t(No symbol) [0x0034A536]\n\t(No symbol) [0x003282DC]\n\t(No symbol) [0x003293DD]\n\tGetHandleVerifier [0x006CAABD+2539405]\n\tGetHandleVerifier [0x0070A78F+2800735]\n\tGetHandleVerifier [0x0070456C+2775612]\n\tGetHandleVerifier [0x004F51E0+616112]\n\t(No symbol) [0x00405F8C]\n\t(No symbol) [0x00402328]\n\t(No symbol) [0x0040240B]\n\t(No symbol) [0x003F4FF7]\n\tBaseThreadInitThunk [0x76CA00C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x774F7B4E+286]\n\tRtlGetAppContainerNamedObjectPath [0x774F7B1E+238]", "trace": "request = <SubRequest 'init_driver' for <Function test_signup_link_visible[chrome]>>\n\n    @pytest.fixture(params=[\"chrome\"],scope=\"session\", autouse= True)\n    def init_driver(request):\n        global web_driver\n        if request.param==\"chrome\":\n            web_driver = webdriver.Chrome(ChromeDriverManager().install())\n            web_driver.maximize_window()\n            web_driver.implicitly_wait(5)\n>           web_driver.get(TestData.Base_Url)\n\nTests\\conftest.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:449: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020B479917B0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x774F7B4E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x774F7B1E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=114.0.5735.110)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0046A813+48355]\nE       \t(No symbol) [0x003FC4B1]\nE       \t(No symbol) [0x00305358]\nE       \t(No symbol) [0x00301B33]\nE       \t(No symbol) [0x002F8CA5]\nE       \t(No symbol) [0x002F9D0A]\nE       \t(No symbol) [0x002F9003]\nE       \t(No symbol) [0x002F8355]\nE       \t(No symbol) [0x002F82EC]\nE       \t(No symbol) [0x002F6F26]\nE       \t(No symbol) [0x002F7688]\nE       \t(No symbol) [0x00306B52]\nE       \t(No symbol) [0x0035CF01]\nE       \t(No symbol) [0x0034A73C]\nE       \t(No symbol) [0x0035C922]\nE       \t(No symbol) [0x0034A536]\nE       \t(No symbol) [0x003282DC]\nE       \t(No symbol) [0x003293DD]\nE       \tGetHandleVerifier [0x006CAABD+2539405]\nE       \tGetHandleVerifier [0x0070A78F+2800735]\nE       \tGetHandleVerifier [0x0070456C+2775612]\nE       \tGetHandleVerifier [0x004F51E0+616112]\nE       \t(No symbol) [0x00405F8C]\nE       \t(No symbol) [0x00402328]\nE       \t(No symbol) [0x0040240B]\nE       \t(No symbol) [0x003F4FF7]\nE       \tBaseThreadInitThunk [0x76CA00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B4E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x774F7B1E+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: WebDriverException"}, "parameters": [{"name": "init_driver", "value": "'chrome'"}], "start": 1686899919421, "stop": 1686899919421, "uuid": "04750860-33a1-492b-905d-58f5ba8a9431", "historyId": "69e05deed2edaa1d6ca9b51c93a543fd", "testCaseId": "0f1adf0a816973211407a358d833dd4e", "fullName": "Tests.test_LoginPage.Test_Login#test_signup_link_visible", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_LoginPage"}, {"name": "subSuite", "value": "Test_Login"}, {"name": "host", "value": "AGLPUN-TL493"}, {"name": "thread", "value": "18176-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_LoginPage"}]}